// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique // clerk user id
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String? // combined industry-subindustry (e.g "tech-software-development" )
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Profile Fields

  bio        String?
  experience Int? // years of experience
  skills     String[] // Array of Skills

  assessments Assessment[]
  resume      Resume?
  coverLetter CoverLetter[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float // Overall quiz score
  questions      Json[] // Array of {question, answer, userAnswer, isCorrect}
  category       String // "Technical", "Behavioral", etc.
  improvementTip String? // AI-generated improvement tip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique // one resume per user
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text // markdown content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String // markdown  content
  jobDescription String?
  companyName    String // name of the company ur applying to
  jobTitle       String // position for applying for
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id       String @id @default(cuid())
  industry String @unique // the industry this data belongs to (e.g "tech-software-development" )

  //Users in this industry
  users User[]

  // Salary Data
  salaryRanges Json[] // array of { role:string, min:float, max:float, median:float, location:string?}

  // Industry Trends
  growthRate  Float // Industry growth rate
  demandLevel DemandLevel // "High", "Medium", "Low"
  topSkills   String[] // Most in-demand skills

  // Market Conditions
  marketOutlook MarketOutlook // "Positive", "Neutral", "Negative"
  keyTrends     String[] // array of current industry trends

  // learning Suggestions 
  recommendedSkills String[] // skills recommended for the industry

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime // sheduled update time

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
